// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: ticket.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import * as _m0 from "protobufjs/minimal";

export interface CreateTicketRequest {
  eventId: string;
  seat: string;
}

export interface BookTicketRequest {
  ticketId: string;
}

export interface TicketResponse {
  ticketId: string;
  eventId: string;
  seat: string;
  status: string;
}

function createBaseCreateTicketRequest(): CreateTicketRequest {
  return { eventId: "", seat: "" };
}

export const CreateTicketRequest = {
  encode(message: CreateTicketRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.eventId !== "") {
      writer.uint32(10).string(message.eventId);
    }
    if (message.seat !== "") {
      writer.uint32(18).string(message.seat);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateTicketRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTicketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.seat = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTicketRequest {
    return {
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      seat: isSet(object.seat) ? globalThis.String(object.seat) : "",
    };
  },

  toJSON(message: CreateTicketRequest): unknown {
    const obj: any = {};
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.seat !== "") {
      obj.seat = message.seat;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTicketRequest>, I>>(base?: I): CreateTicketRequest {
    return CreateTicketRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTicketRequest>, I>>(object: I): CreateTicketRequest {
    const message = createBaseCreateTicketRequest();
    message.eventId = object.eventId ?? "";
    message.seat = object.seat ?? "";
    return message;
  },
};

function createBaseBookTicketRequest(): BookTicketRequest {
  return { ticketId: "" };
}

export const BookTicketRequest = {
  encode(message: BookTicketRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ticketId !== "") {
      writer.uint32(10).string(message.ticketId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BookTicketRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBookTicketRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ticketId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BookTicketRequest {
    return { ticketId: isSet(object.ticketId) ? globalThis.String(object.ticketId) : "" };
  },

  toJSON(message: BookTicketRequest): unknown {
    const obj: any = {};
    if (message.ticketId !== "") {
      obj.ticketId = message.ticketId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BookTicketRequest>, I>>(base?: I): BookTicketRequest {
    return BookTicketRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BookTicketRequest>, I>>(object: I): BookTicketRequest {
    const message = createBaseBookTicketRequest();
    message.ticketId = object.ticketId ?? "";
    return message;
  },
};

function createBaseTicketResponse(): TicketResponse {
  return { ticketId: "", eventId: "", seat: "", status: "" };
}

export const TicketResponse = {
  encode(message: TicketResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ticketId !== "") {
      writer.uint32(10).string(message.ticketId);
    }
    if (message.eventId !== "") {
      writer.uint32(18).string(message.eventId);
    }
    if (message.seat !== "") {
      writer.uint32(26).string(message.seat);
    }
    if (message.status !== "") {
      writer.uint32(34).string(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TicketResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTicketResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ticketId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.seat = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TicketResponse {
    return {
      ticketId: isSet(object.ticketId) ? globalThis.String(object.ticketId) : "",
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      seat: isSet(object.seat) ? globalThis.String(object.seat) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: TicketResponse): unknown {
    const obj: any = {};
    if (message.ticketId !== "") {
      obj.ticketId = message.ticketId;
    }
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.seat !== "") {
      obj.seat = message.seat;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TicketResponse>, I>>(base?: I): TicketResponse {
    return TicketResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TicketResponse>, I>>(object: I): TicketResponse {
    const message = createBaseTicketResponse();
    message.ticketId = object.ticketId ?? "";
    message.eventId = object.eventId ?? "";
    message.seat = object.seat ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

export type TicketServiceService = typeof TicketServiceService;
export const TicketServiceService = {
  createTicket: {
    path: "/ticket.TicketService/CreateTicket",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateTicketRequest) => Buffer.from(CreateTicketRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateTicketRequest.decode(value),
    responseSerialize: (value: TicketResponse) => Buffer.from(TicketResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TicketResponse.decode(value),
  },
  bookTicket: {
    path: "/ticket.TicketService/BookTicket",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: BookTicketRequest) => Buffer.from(BookTicketRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => BookTicketRequest.decode(value),
    responseSerialize: (value: TicketResponse) => Buffer.from(TicketResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TicketResponse.decode(value),
  },
} as const;

export interface TicketServiceServer extends UntypedServiceImplementation {
  createTicket: handleUnaryCall<CreateTicketRequest, TicketResponse>;
  bookTicket: handleUnaryCall<BookTicketRequest, TicketResponse>;
}

export interface TicketServiceClient extends Client {
  createTicket(
    request: CreateTicketRequest,
    callback: (error: ServiceError | null, response: TicketResponse) => void,
  ): ClientUnaryCall;
  createTicket(
    request: CreateTicketRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TicketResponse) => void,
  ): ClientUnaryCall;
  createTicket(
    request: CreateTicketRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TicketResponse) => void,
  ): ClientUnaryCall;
  bookTicket(
    request: BookTicketRequest,
    callback: (error: ServiceError | null, response: TicketResponse) => void,
  ): ClientUnaryCall;
  bookTicket(
    request: BookTicketRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TicketResponse) => void,
  ): ClientUnaryCall;
  bookTicket(
    request: BookTicketRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TicketResponse) => void,
  ): ClientUnaryCall;
}

export const TicketServiceClient = makeGenericClientConstructor(
  TicketServiceService,
  "ticket.TicketService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TicketServiceClient;
  service: typeof TicketServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
