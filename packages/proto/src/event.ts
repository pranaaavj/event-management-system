// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: event.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import * as _m0 from "protobufjs/minimal";

export interface CreateEventRequest {
  name: string;
}

export interface GetEventRequest {
  eventId: string;
}

export interface EventResponse {
  eventId: string;
  name: string;
}

function createBaseCreateEventRequest(): CreateEventRequest {
  return { name: "" };
}

export const CreateEventRequest = {
  encode(message: CreateEventRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateEventRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEventRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CreateEventRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateEventRequest>, I>>(base?: I): CreateEventRequest {
    return CreateEventRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateEventRequest>, I>>(object: I): CreateEventRequest {
    const message = createBaseCreateEventRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetEventRequest(): GetEventRequest {
  return { eventId: "" };
}

export const GetEventRequest = {
  encode(message: GetEventRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.eventId !== "") {
      writer.uint32(10).string(message.eventId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetEventRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventRequest {
    return { eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "" };
  },

  toJSON(message: GetEventRequest): unknown {
    const obj: any = {};
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEventRequest>, I>>(base?: I): GetEventRequest {
    return GetEventRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEventRequest>, I>>(object: I): GetEventRequest {
    const message = createBaseGetEventRequest();
    message.eventId = object.eventId ?? "";
    return message;
  },
};

function createBaseEventResponse(): EventResponse {
  return { eventId: "", name: "" };
}

export const EventResponse = {
  encode(message: EventResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.eventId !== "") {
      writer.uint32(10).string(message.eventId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventResponse {
    return {
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: EventResponse): unknown {
    const obj: any = {};
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventResponse>, I>>(base?: I): EventResponse {
    return EventResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventResponse>, I>>(object: I): EventResponse {
    const message = createBaseEventResponse();
    message.eventId = object.eventId ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

export type EventServiceService = typeof EventServiceService;
export const EventServiceService = {
  createEvent: {
    path: "/event.EventService/CreateEvent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateEventRequest) => Buffer.from(CreateEventRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateEventRequest.decode(value),
    responseSerialize: (value: EventResponse) => Buffer.from(EventResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => EventResponse.decode(value),
  },
  getEvent: {
    path: "/event.EventService/GetEvent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetEventRequest) => Buffer.from(GetEventRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetEventRequest.decode(value),
    responseSerialize: (value: EventResponse) => Buffer.from(EventResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => EventResponse.decode(value),
  },
} as const;

export interface EventServiceServer extends UntypedServiceImplementation {
  createEvent: handleUnaryCall<CreateEventRequest, EventResponse>;
  getEvent: handleUnaryCall<GetEventRequest, EventResponse>;
}

export interface EventServiceClient extends Client {
  createEvent(
    request: CreateEventRequest,
    callback: (error: ServiceError | null, response: EventResponse) => void,
  ): ClientUnaryCall;
  createEvent(
    request: CreateEventRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: EventResponse) => void,
  ): ClientUnaryCall;
  createEvent(
    request: CreateEventRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: EventResponse) => void,
  ): ClientUnaryCall;
  getEvent(
    request: GetEventRequest,
    callback: (error: ServiceError | null, response: EventResponse) => void,
  ): ClientUnaryCall;
  getEvent(
    request: GetEventRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: EventResponse) => void,
  ): ClientUnaryCall;
  getEvent(
    request: GetEventRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: EventResponse) => void,
  ): ClientUnaryCall;
}

export const EventServiceClient = makeGenericClientConstructor(
  EventServiceService,
  "event.EventService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): EventServiceClient;
  service: typeof EventServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
